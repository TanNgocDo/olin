// Code generated by protoc-gen-twirp_metrics v0.0.1, DO NOT EDIT.
// source: archway.proto

package archway

import "context"
import "github.com/Xe/ln"

// InteropLogging is a middleware for Interop that logs all usage of the methods
type InteropLogging struct {
	next Interop
}

func NewInteropLogging(next Interop) Interop {
	var result InteropLogging
	result.next = next
	return result
}

func (i InteropLogging) CreateHandler(ctx context.Context, input *Handler) (result *Handler, err error) {
	ctx = ln.WithF(ctx, ln.F{
		"twirp_package": "within.olin.archway",
		"twirp_service": "Interop",
		"twirp_method": "CreateHandler",
	})
	result, err = i.next.CreateHandler(ctx, input)
	if err != nil {
		ln.Error(ctx, err, input)
	}
	return
}

func (i InteropLogging) DeleteHandler(ctx context.Context, input *Id) (result *Handler, err error) {
	ctx = ln.WithF(ctx, ln.F{
		"twirp_package": "within.olin.archway",
		"twirp_service": "Interop",
		"twirp_method": "DeleteHandler",
	})
	result, err = i.next.DeleteHandler(ctx, input)
	if err != nil {
		ln.Error(ctx, err, input)
	}
	return
}

func (i InteropLogging) GetHandler(ctx context.Context, input *Id) (result *Handler, err error) {
	ctx = ln.WithF(ctx, ln.F{
		"twirp_package": "within.olin.archway",
		"twirp_service": "Interop",
		"twirp_method": "GetHandler",
	})
	result, err = i.next.GetHandler(ctx, input)
	if err != nil {
		ln.Error(ctx, err, input)
	}
	return
}

func (i InteropLogging) ListHandlers(ctx context.Context, input *Nil) (result *Handlers, err error) {
	ctx = ln.WithF(ctx, ln.F{
		"twirp_package": "within.olin.archway",
		"twirp_service": "Interop",
		"twirp_method": "ListHandlers",
	})
	result, err = i.next.ListHandlers(ctx, input)
	if err != nil {
		ln.Error(ctx, err, input)
	}
	return
}

func (i InteropLogging) CreateEvent(ctx context.Context, input *Event) (result *Nil, err error) {
	ctx = ln.WithF(ctx, ln.F{
		"twirp_package": "within.olin.archway",
		"twirp_service": "Interop",
		"twirp_method": "CreateEvent",
	})
	result, err = i.next.CreateEvent(ctx, input)
	if err != nil {
		ln.Error(ctx, err, input)
	}
	return
}

func (i InteropLogging) GetEvent(ctx context.Context, input *Id) (result *Event, err error) {
	ctx = ln.WithF(ctx, ln.F{
		"twirp_package": "within.olin.archway",
		"twirp_service": "Interop",
		"twirp_method": "GetEvent",
	})
	result, err = i.next.GetEvent(ctx, input)
	if err != nil {
		ln.Error(ctx, err, input)
	}
	return
}

func (i InteropLogging) GetMostRecentEvent(ctx context.Context, input *Topic) (result *Event, err error) {
	ctx = ln.WithF(ctx, ln.F{
		"twirp_package": "within.olin.archway",
		"twirp_service": "Interop",
		"twirp_method": "GetMostRecentEvent",
	})
	result, err = i.next.GetMostRecentEvent(ctx, input)
	if err != nil {
		ln.Error(ctx, err, input)
	}
	return
}

// F ields for logging.
func (i Nil) F() ln.F {
	return ln.F{
	}
}

// F ields for logging.
func (i Handler) F() ln.F {
	return ln.F{
		"handler_id": i.Id,
		"handler_created_at_unix_utc": i.CreatedAtUnixUtc,
		"handler_topic": i.Topic,
		"handler_module": i.Module,
	}
}

// F ields for logging.
func (i Handlers) F() ln.F {
	return ln.F{
	}
}

// F ields for logging.
func (i Id) F() ln.F {
	return ln.F{
		"id_id": i.Id,
		"id_topic": i.Topic,
	}
}

// F ields for logging.
func (i Topic) F() ln.F {
	return ln.F{
		"topic_topic": i.Topic,
	}
}

// F ields for logging.
func (i Event) F() ln.F {
	return ln.F{
		"event_id": i.Id,
		"event_created_at_unix_utc": i.CreatedAtUnixUtc,
		"event_topic": i.Topic,
		"event_data": i.Data,
		"event_mime_type": i.MimeType,
	}
}


