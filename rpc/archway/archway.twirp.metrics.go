// Code generated by protoc-gen-twirp_metrics v0.0.1, DO NOT EDIT.
// source: archway.proto

package archway

import "context"
import "time"
import "github.com/go-kit/kit/metrics"
import "github.com/go-kit/kit/metrics/provider"

// InteropMetrics is a middleware for Interop that collects timing and error rate data for servers.
type InteropMetrics struct {
	Next Interop
	CreateHandlerErrorCount metrics.Counter
	CreateHandlerDurationNS metrics.Histogram
	DeleteHandlerErrorCount metrics.Counter
	DeleteHandlerDurationNS metrics.Histogram
	GetHandlerErrorCount metrics.Counter
	GetHandlerDurationNS metrics.Histogram
	ListHandlersErrorCount metrics.Counter
	ListHandlersDurationNS metrics.Histogram
	CreateEventErrorCount metrics.Counter
	CreateEventDurationNS metrics.Histogram
	GetEventErrorCount metrics.Counter
	GetEventDurationNS metrics.Histogram
	GetMostRecentEventErrorCount metrics.Counter
	GetMostRecentEventDurationNS metrics.Histogram
}

func NewInteropMetrics(next Interop, prov provider.Provider) Interop {
	var result InteropMetrics
	result.Next = next
	result.CreateHandlerErrorCount = prov.NewCounter(`twirp.within.olin.archway.interop.create_handler.error.count`)
	result.CreateHandlerDurationNS = prov.NewHistogram(`twirp.within.olin.archway.interop.create_handler.duration.ns`, 20)
	result.DeleteHandlerErrorCount = prov.NewCounter(`twirp.within.olin.archway.interop.delete_handler.error.count`)
	result.DeleteHandlerDurationNS = prov.NewHistogram(`twirp.within.olin.archway.interop.delete_handler.duration.ns`, 20)
	result.GetHandlerErrorCount = prov.NewCounter(`twirp.within.olin.archway.interop.get_handler.error.count`)
	result.GetHandlerDurationNS = prov.NewHistogram(`twirp.within.olin.archway.interop.get_handler.duration.ns`, 20)
	result.ListHandlersErrorCount = prov.NewCounter(`twirp.within.olin.archway.interop.list_handlers.error.count`)
	result.ListHandlersDurationNS = prov.NewHistogram(`twirp.within.olin.archway.interop.list_handlers.duration.ns`, 20)
	result.CreateEventErrorCount = prov.NewCounter(`twirp.within.olin.archway.interop.create_event.error.count`)
	result.CreateEventDurationNS = prov.NewHistogram(`twirp.within.olin.archway.interop.create_event.duration.ns`, 20)
	result.GetEventErrorCount = prov.NewCounter(`twirp.within.olin.archway.interop.get_event.error.count`)
	result.GetEventDurationNS = prov.NewHistogram(`twirp.within.olin.archway.interop.get_event.duration.ns`, 20)
	result.GetMostRecentEventErrorCount = prov.NewCounter(`twirp.within.olin.archway.interop.get_most_recent_event.error.count`)
	result.GetMostRecentEventDurationNS = prov.NewHistogram(`twirp.within.olin.archway.interop.get_most_recent_event.duration.ns`, 20)
	return result
}

func (i InteropMetrics) CreateHandler(ctx context.Context, input *Handler) (result *Handler, err error) {
	defer func(begin time.Time) {
		i.CreateHandlerDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.CreateHandlerErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.CreateHandler(ctx, input)
	return
}

func (i InteropMetrics) DeleteHandler(ctx context.Context, input *Id) (result *Handler, err error) {
	defer func(begin time.Time) {
		i.DeleteHandlerDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.DeleteHandlerErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.DeleteHandler(ctx, input)
	return
}

func (i InteropMetrics) GetHandler(ctx context.Context, input *Id) (result *Handler, err error) {
	defer func(begin time.Time) {
		i.GetHandlerDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.GetHandlerErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.GetHandler(ctx, input)
	return
}

func (i InteropMetrics) ListHandlers(ctx context.Context, input *Nil) (result *Handlers, err error) {
	defer func(begin time.Time) {
		i.ListHandlersDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.ListHandlersErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.ListHandlers(ctx, input)
	return
}

func (i InteropMetrics) CreateEvent(ctx context.Context, input *Event) (result *Nil, err error) {
	defer func(begin time.Time) {
		i.CreateEventDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.CreateEventErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.CreateEvent(ctx, input)
	return
}

func (i InteropMetrics) GetEvent(ctx context.Context, input *Id) (result *Event, err error) {
	defer func(begin time.Time) {
		i.GetEventDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.GetEventErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.GetEvent(ctx, input)
	return
}

func (i InteropMetrics) GetMostRecentEvent(ctx context.Context, input *Topic) (result *Event, err error) {
	defer func(begin time.Time) {
		i.GetMostRecentEventDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.GetMostRecentEventErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.GetMostRecentEvent(ctx, input)
	return
}

